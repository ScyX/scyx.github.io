<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019.3.18腾讯一面]]></title>
    <url>%2F2019%2F04%2F16%2F2019-3-18%E8%85%BE%E8%AE%AF%E4%B8%80%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[3.18晚上9点1.]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java排序算法之插入排序]]></title>
    <url>%2F2019%2F04%2F16%2FJava%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[什么是插入排序插入排序的基本思想就是把一个数插入到已经有序的数列中，形式就像平时打牌一样，要把一张牌插到已经有的牌中。这里只是要把牌看成数组。初始时要把数组的第一个元素看成有序列表，从第二个数开始，依次将当前数插入到前面的有序列表中。12345678910111213141516public static void main(String[] args)&#123; int[] arr=&#123;5,4,3,2,1&#125;; for(int i=1;i&lt;arr.length;i++)&#123; //第一次把第一个元素也就是数组的0位置上的数看成有序，所以从1位置也就是数组的第二个数开始 int temp=arr[i]; //当前数 int left=i-1; //把当前数的前面的所有数都看成有序列表 while(left&gt;=0&amp;&amp;temp&lt;arr[left])&#123; //依次和前面的数比较，如果当前数比前面的数小 就把前面的数后移一位，继续向前比，直到不比前面的数小为止 arr[left+1]=arr[left]; left--; &#125; arr[left+1]=temp; //把当前数插入，因为之前的元素都向后移了，总会有一个空的位置，这个位置就是这个数应该插入在有序列表中的位置 &#125; for(int a:arr)&#123; System.out.println(a);//由于此处采用的是从小到大排，所以结果应该为1,2,3,4,5 &#125; &#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中接口和抽象类的区别]]></title>
    <url>%2F2019%2F04%2F15%2FJava%E4%B8%AD%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[抽象类使用了关键词abstract声明的类叫作“抽象类”。如果一个类里包含了一个或多个抽象方法，类就必须指定成abstract（抽象）。“抽象方法”,属于一种不完整的方法，只含有一个声明，没有方法主体也就是没有{}，抽象类不能被实例化（也就是不能用抽象类new）。 接口接口是一系列方法的声明，是一些方法特征的集合，接口里面只有方法的声明而没有方法的实现，也就是没有方法主体，没有{}，里面的方法都是由public abstract修饰的。 区别 抽象类可以有具体的方法实现，而接口是完全抽象的，不能有方法实现。 子类使用extends继承抽象类，如果子类不是抽象类的话，要实现抽象类的全部抽象方法。子类使用implements实现接口，并且要实现接口声明的全部方法。 修饰符：抽象类可以用public protected和default这些修饰符，接口方法默认修饰符是public，不可以用其他修饰符。 抽象类可以有main方法也可以运行，接口不能有main，也不能运行。 抽象方法可以继承一个类和实现多个接口，接口只可以继承一个或多个其它接口。 抽象类比接口速度要快，因为接口需要时间去寻找在类中实现的方法。 往抽象类中添加新的方法可以直接提供实现，所以可以不用改变继承抽象类的子类，而向接口添加新的方法，必须改变接口的实现类。 抽象类可以有构造方法，只是不能创建抽象类的实例化对象，接口没有构造方法，不能被实例化。 什么时候使用抽象类？什么时候使用接口？ 如果拥有一些方法并且想让它们中的一些有默认实现，用抽象类。 由于Java不支持多继承，子类不能够继承多个类，但可以实现多个接口。这时候可以使用接口解决问题。 如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客新建文章并发布]]></title>
    <url>%2F2019%2F04%2F14%2Farticle%2F</url>
    <content type="text"><![CDATA[跟着网上搭建的个人博客 记录一下这是加粗这是斜体]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
